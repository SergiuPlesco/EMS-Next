generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  phone          String?
  accounts       Account[]
  sessions       Session[]
  skills         UserSkill[]
  positions      UserPosition[]
  managers       User[]         @relation("UserManagers")
  members        User[]         @relation("UserManagers")
  projects       UserProject[]
  certificates   Certificate[]
  employmentDate DateTime?
  role           String?        @default("user")
  availability   Availability   @default(FULLTIME)
}

model Skill {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  users UserSkill[]
}

model UserSkill {
  id        Int      @id @default(autoincrement())
  skillId   Int?
  userId    String?
  rating    Int
  name      String
  skill     Skill?    @relation(fields: [skillId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Position {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  users UserPosition[]
}

model UserPosition {
  id         Int      @id @default(autoincrement())
  name       String
  userId     String?
  positionId Int
  user       User?    @relation(fields: [userId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])
}

model Project {
  id    Int           @id @default(autoincrement())
  name  String        @unique
  users UserProject[]
}

model UserProject {
  id          Int       @id @default(autoincrement())
  name        String   @unique
  description String
  startDate   DateTime
  endDate     DateTime?
  userId      String?
  projectId   Int
  user        User?     @relation(fields: [userId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
}

model Certificate {
  id        Int      @id @default(autoincrement())
  name      String
  image     String?
  url       String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Availability {
  FULLTIME
  PARTTIME
  NOTAVAILABLE
}
